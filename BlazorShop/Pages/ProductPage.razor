@page "/product"
@using BlazorShop.Data
@using BlazorShop.Services
@using BlazorInputFile
@using System.IO

@inherits OwningComponentBase<ProductService>

@if (products == null)
{
    <p>Loading..</p>
}
else
{
    <div class="container border p-3">
        <div class="row">
            <div class="col-5">
                <h3 class="text-info">Product List</h3>
            </div>
            <div class="col-3">
                <button class="btn btn-info form-control" @onclick="AddNewProduct">
                    Add New Product
                </button>
            </div>
        </div>

        <div class="row pt-4">
            <table class="table">
                <thead>
                    <tr>
                        <th scope="col">Product Name</th>
                        <th scope="col">Price</th>
                        <th scope="col">Shade Color</th>
                        <th scope="col">Category</th>
                        <th scope="col"></th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var obj in products)
                    {
                    <tr>
                        <td scope="row">@obj.ProductName</td>
                        <td scope="row">@obj.Price</td>
                        <td scope="row">@obj.ShadeColor</td>
                        <td scope="row">@obj.Category.CategoryName</td>
                        <td>
                            <button class="btn btn-primary btn-sm" @onclick="(()=>EditProduct(obj))">Edit</button>
                        </td>
                    </tr>
                    }

                </tbody>
            </table>
        </div>

    </div>

}

@* Modal Window *@
@if (ShowPopup)
{
    <div class="modal" tabindex="-1" style="display:block" role="dialog">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h3 class="modal-title text-info">@(objProduct.ProductId != 0 ? "Update" : "Create")Category</h3>
                    <button type="button" class="close" @onclick="ClosePopup" aria-label="Close">
                        <span aria-hidden="true">X</span>
                    </button>
                </div>
                <EditForm Model="objProduct" OnValidSubmit="@ValidSubmit">
                    <div class="modal-body">
                        <DataAnnotationsValidator />
                        <ValidationSummary />
                        <div class="row">
                            <div class="col-9">
                                <div class="row py-2">
                                    <div class="col-4">
                                        Category Name
                                    </div>
                                    <div class="col-8">

                                    </div>
                                </div>
                                <div class="row py-2">
                                    <div class="col-4">
                                        Product Name
                                    </div>
                                    <div class="col-8">
                                        <input class="form-control" type="text" @bind="objProduct.ProductName" />
                                    </div>
                                </div>
                                <div class="row py-2">
                                    <div class="col-4">
                                        Price
                                    </div>
                                    <div class="col-8">
                                        <input class="form-control" type="text" @bind="objProduct.Price" />
                                    </div>
                                </div>
                                <div class="row py-2">
                                    <div class="col-4">
                                        Shade Color
                                    </div>
                                    <div class="col-8">
                                        <input class="form-control" type="text" @bind="objProduct.ShadeColor" />
                                    </div>
                                </div>
                                <div class="row py-2">
                                    <div class="col-4">
                                        Image
                                    </div>
                                    <div class="col-8">
                                        <InputFile OnChange="HandleSelection"></InputFile>
                                    </div>
                                </div>
                                <div class="row py-2">
                                    <div class="offset-4 col">
                                        <button class="btn btn-primary form-control" type="submit">Submit</button>
                                    </div>
                                    @if (objProduct.CategoryId > 0)
                                    {
                                        <div class="col">
                                            <button class="btn btn-danger form-control" @onclick="DeleteProduct" type="submit">Delete</button>
                                        </div>
                                    }
                                </div>
                            </div>
                        </div>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
}



@* End of Modal Window *@


@code {

    List<Category> categories;
    List<Product> products;
    Product objProduct = new Product();
    bool ShowPopup = false;
    public byte[] ImageUploaded { get; set; }

    protected override void OnInitialized()
    {
        products = Service.GetProducts();
    }

    private void AddNewProduct()
    {
        // flushing out the old values
        objProduct = new Product();
        categories = Service.GetCategoryList();
        objProduct.CategoryId = categories.ToList()[0].CategoryId;
        objProduct.ProductId = 0;
        ShowPopup = true;
    }

    private void EditProduct(Product product)
    {
        objProduct = product;
        categories = Service.GetCategoryList();
        ShowPopup = true;
    }

    private void DeleteProduct()
    {
        ShowPopup = false;
        var result = Service.DeleteProduct(objProduct);
        products.Clear();
        products = Service.GetProducts();
    }

    private void ClosePopup()
    {
        ShowPopup = false;
    }

    void ValidSubmit()
    {
        var result = false;
        ShowPopup = false;

        if(ImageUploaded != null)
        {
            objProduct.Image = ImageUploaded;
            ImageUploaded = null;
        }

        if (objProduct.ProductId > 0)
        {
            result = Service.UpdateProduct(objProduct);
        }
        else
        {
            result = Service.CreateProduct(objProduct);
        }


        products = Service.GetProducts();
    }

    //Method: Handling input file upload
    async Task HandleSelection(IFileListEntry[] files)
    {
        var file = files.FirstOrDefault();
        if(file != null)
        {
            var ms = new MemoryStream();
            await file.Data.CopyToAsync(ms);
            ImageUploaded = ms.ToArray();
        }

    }

    // Method: converting array of bytes from database to image that we have to display on the UI

    string convertImageToDisplay(byte[] image)
    {
        if(image != null)
        {
            var base64 = Convert.ToBase64String(image);
            var finalStr = string.Format("data:image/jpg;base64,{0}", base64);
            return finalStr;
        }
        else
        {
            return "";
        }

    }

}
